/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mensajeria;

import java.util.Arrays;
import javax.swing.JDialog;
import javax.swing.JTextArea;

/**
 *
 * @author Jespi_000
 */
public class Pantalla_principal extends javax.swing.JFrame {

    /**
     * Creates new form Pantalla_principal
     */
    public Pantalla_principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelViewDinamico = new javax.swing.JPanel();
        visualizacionLabel = new javax.swing.JLabel();
        consolaLabel = new java.awt.Label();
        jScrollPane1 = new javax.swing.JScrollPane();
        consolaOldText = new javax.swing.JTextArea();
        consolaText = new javax.swing.JTextField();
        outputLabel = new java.awt.Label();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputText = new javax.swing.JTextArea();
        menu = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        Ayuda = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema de Mensajería");
        setName("VentanaPrincipal"); // NOI18N
        setResizable(false);

        PanelViewDinamico.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        PanelViewDinamico.setToolTipText("Aquí podrá visualizar el estado de cada elemento del sistema al ejecutar la función view().");

        visualizacionLabel.setText("Visualización de Estados y Logs");

        javax.swing.GroupLayout PanelViewDinamicoLayout = new javax.swing.GroupLayout(PanelViewDinamico);
        PanelViewDinamico.setLayout(PanelViewDinamicoLayout);
        PanelViewDinamicoLayout.setHorizontalGroup(
            PanelViewDinamicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelViewDinamicoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(visualizacionLabel)
                .addContainerGap(241, Short.MAX_VALUE))
        );
        PanelViewDinamicoLayout.setVerticalGroup(
            PanelViewDinamicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelViewDinamicoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(visualizacionLabel)
                .addContainerGap(209, Short.MAX_VALUE))
        );

        consolaLabel.setText("Consola");

        consolaOldText.setEditable(false);
        consolaOldText.setBackground(new java.awt.Color(0, 0, 0));
        consolaOldText.setColumns(20);
        consolaOldText.setForeground(new java.awt.Color(0, 153, 255));
        consolaOldText.setLineWrap(true);
        consolaOldText.setRows(5);
        consolaOldText.setText("¡Bienvenido al sistema! \nPara activar las configuraciones ejecute create() en la consola de letras verdes abajo.");
        consolaOldText.setToolTipText("Aquí se muestran sus entradas anteriores en la consola.");
        consolaOldText.setWrapStyleWord(true);
        consolaOldText.setCaretColor(new java.awt.Color(51, 153, 255));
        consolaOldText.setDisabledTextColor(new java.awt.Color(51, 153, 255));
        jScrollPane1.setViewportView(consolaOldText);

        consolaText.setBackground(new java.awt.Color(0, 0, 0));
        consolaText.setForeground(new java.awt.Color(0, 255, 51));
        consolaText.setText(">>> ");
        consolaText.setToolTipText("Aquí puede escribir las funciones permitidas por el sistema.");
        consolaText.setAlignmentX(0.0F);
        consolaText.setCaretColor(new java.awt.Color(0, 255, 0));
        consolaText.setName(""); // NOI18N
        consolaText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consolaTextActionPerformed(evt);
            }
        });
        consolaText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                consolaTextKeyTyped(evt);
            }
        });

        outputLabel.setText("Evaluación de la información ");

        outputText.setEditable(false);
        outputText.setColumns(20);
        outputText.setLineWrap(true);
        outputText.setRows(5);
        outputText.setText(Globales.TextoAyuda);
        outputText.setToolTipText("Aquí se muestran los mensajes de error, advertencia, ayuda o éxito de sus acciones.");
        outputText.setWrapStyleWord(true);
        jScrollPane2.setViewportView(outputText);

        File.setText("File");
        menu.add(File);

        Ayuda.setText("Ayuda");
        Ayuda.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                AyudaMenuSelected(evt);
            }
        });
        Ayuda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AyudaMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                AyudaMousePressed(evt);
            }
        });
        Ayuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AyudaActionPerformed(evt);
            }
        });
        menu.add(Ayuda);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PanelViewDinamico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(consolaText)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(consolaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(outputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PanelViewDinamico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(consolaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(consolaText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        consolaLabel.getAccessibleContext().setAccessibleName("ConsolaLabel");
        outputLabel.getAccessibleContext().setAccessibleName("Output");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void consolaTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consolaTextActionPerformed
        //Escuchar la entrada del usuario
        String entrada = new String();
        try {
            //Obtener la entrada del usuario quitandole los >>> 
            entrada = consolaText.getText();
            entrada = entrada.replace(">", "");
            entrada = entrada.replace(" ", "");
            //System.out.println("Entrada del usuario: " + entrada);
            
            //Limpiar el texto en consolaText
            consolaText.setText(">>> ");
            //Mover el texto a consolaOldText y scrollear hasta abajo
            consolaOldText.append("\n>>> " + entrada);
            consolaOldText.setCaretPosition(consolaOldText.getDocument().getLength());
            
            String[] lineaEntrada = entrada.split("\\(");
            String nombreFuncion = lineaEntrada[0];
            
            //Si la función entrada del usuario no está dentro de los comandos permitidos entonces:
            if ((!(Arrays.asList(Globales.FuncionesPermitidas).contains(nombreFuncion))) || (!(entrada.endsWith(")")))){
                //Mostrar el mensaje de error en outputText
                outputText.setText("Error: La acción digitada no es válida para el sistema.");
            }
            else {
                //Obtener el nombre de la función y sus parámetros, validarlos y llamar a la función respectiva directamente.
                outputText.setText("Realizado con éxito.");
            }
        }
        catch(Exception e){
            System.out.println("Excepción.");
        }
    }//GEN-LAST:event_consolaTextActionPerformed

    private void consolaTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_consolaTextKeyTyped
        //Función para mostrar ayuda sensitiva cuando el usuario ingrese una función.
        char tecla = evt.getKeyChar();
        if (tecla == '('){
            String entradaPorLinea = consolaText.getText();
            entradaPorLinea = entradaPorLinea.replace(">", "");
            entradaPorLinea = entradaPorLinea.replace(" ", "");
            String[] entradaPorLineaSeccionada = entradaPorLinea.split("\\(");
            String nombreFuncion = entradaPorLineaSeccionada[0];
            if(Arrays.asList(Globales.FuncionesPermitidas).contains(nombreFuncion)){
                switch(nombreFuncion){
                    case "create":
                        outputText.setText("create(). Sin parámetros. Activa las configuraciones especificadas anteriormente. Los demás comandos no funcionan sin haber ejecutado este comando.");
                        break;
                    case "view":
                        outputText.setText("view(). Sin parámetros. Permite observar todo lo que está pasando en el sistema.");
                        break;
                    case "reset":
                        outputText.setText("reset(). Sin parámetros. Permite reconfigurar el sistema, borrando los estados al momento.");
                        break;
                    case "send":
                        if (Globales.DireccionamientoDirecto){
                            if (Globales.FIFO){
                                outputText.setText("send(NombreDelProceso,Mensaje). Envía un mensaje a un proceso.");
                            }
                            else{
                                outputText.setText("send(NombreDelProceso,Mensaje,NumeroDePrioridad). Envía un mensaje con cierta prioridad a un proceso (1,2 o 3, con 1 la más alta).");
                            }
                        }
                        else{
                            if (Globales.FIFO){
                                outputText.setText("send(NombreDelBuzón,Mensaje). Envía un mensaje a un buzón.");
                            }
                            else{
                                outputText.setText("send(NombreDelBuzón,Mensaje,NúmeroDePrioridad). Envía un mensaje a un buzón con cierta prioridad (1,2 o 3, con 1 la más alta).");
                            }
                        }
                        if (Globales.LargoMsjFijo){
                            outputText.append("\nEl mensaje debe tener como máximo "+Globales.LargoMsj+" caracteres.");
                        }
                        break;
                    case "receive":
                        if (Globales.ReceiveExplicito){
                            outputText.setText("receive(NombreDelProceso). Recibir un mensaje a un proceso.");
                            }
                        else{
                            if (Globales.DireccionamientoDirecto){
                                outputText.setText("receive(). Recibir un mensaje del proceso que le envió previamente.");
                            }
                            else{
                                outputText.setText("receive(). Recibir un mensaje del buzón suscrito.");
                            }
                        }
                        break;
                    case "create_mailbox":
                        if (!(Globales.DireccionamientoDirecto)){
                            if (Globales.IndirectoEstatico){
                                outputText.setText("create_mailbox(NombreDelBuzón). Crea un buzón.");
                            }
                            else{
                                outputText.setText("Advertencia: No puede ejecutar este comando en el direccionamiento indirecto dinámico.");
                            }
                        }
                        else{
                            outputText.setText("Advertencia: No se puede ejecutar este comando en el direccionamiento directo.");
                        }
                        break;
                    case "connect_mailbox":
                        if (!(Globales.DireccionamientoDirecto)){
                            if (!(Globales.IndirectoEstatico)){
                                outputText.setText("connect_mailbox(NombreDelBuzón). Conectar el proceso en referencia a cierto buzón.");
                            }
                            else{
                                outputText.setText("Advertencia: No se puede ejecutar este comando en el direccionamiento indirecto estático.");
                            }
                        }
                        else{
                            outputText.setText("Advertencia: No se puede ejecutar este comando en el direccionamiento directo.");
                        }
                        break;
                    case "disconnect_mailbox":
                        if (!(Globales.DireccionamientoDirecto)){
                            if (!(Globales.IndirectoEstatico)){
                                outputText.setText("disconnect_mailbox(NombreDelBuzón). Desconectar el proceso en referencia de cierto buzón.");
                            }
                            else{
                                outputText.setText("Advertencia: No se puede ejecutar este comando en el direccionamiento indirecto estático.");
                            }
                        }
                        else{
                            outputText.setText("Advertencia: No se puede ejecutar este comando en el direccionamiento directo.");
                        }
                        break;
                }
            }
            else{
                outputText.setText("Advertencia: El nombre de la función que acaba de ingresar no es válido, dirígase al menú de ayuda para observar las funciones permitidas.");
            }
        }
    }//GEN-LAST:event_consolaTextKeyTyped

    private void AyudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AyudaActionPerformed

    }//GEN-LAST:event_AyudaActionPerformed

    private void AyudaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AyudaMousePressed
        JDialog Help = new JDialog();
        JTextArea HelpTextArea = new JTextArea();
        HelpTextArea.setText(Globales.TextoAyuda);
        HelpTextArea.setLineWrap(true);
        Help.setSize(500, 300);
        Help.add(HelpTextArea);
        Help.setTitle("Ayuda");
        Help.setVisible(true);
    }//GEN-LAST:event_AyudaMousePressed

    private void AyudaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AyudaMouseClicked

    }//GEN-LAST:event_AyudaMouseClicked

    private void AyudaMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_AyudaMenuSelected

    }//GEN-LAST:event_AyudaMenuSelected

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pantalla_principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pantalla_principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pantalla_principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pantalla_principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pantalla_principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Ayuda;
    private javax.swing.JMenu File;
    private javax.swing.JPanel PanelViewDinamico;
    private java.awt.Label consolaLabel;
    private javax.swing.JTextArea consolaOldText;
    private javax.swing.JTextField consolaText;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuBar menu;
    private java.awt.Label outputLabel;
    private javax.swing.JTextArea outputText;
    private javax.swing.JLabel visualizacionLabel;
    // End of variables declaration//GEN-END:variables
}
