/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mensajeria;

import javax.swing.JDialog;
import javax.swing.JTextArea;

/**
 *
 * @author Andres
 */
public class VentanaInicio extends javax.swing.JFrame {

    /**
     * Creates new form VentanaInicio
     */
    public VentanaInicio() {
        initComponents();
        CSend.setVisible(false);
        CReceive.setVisible(false);
        CDirecto.setVisible(false);
        CIndirecto.setVisible(false);
        CDirecReceive.setVisible(false);        
        TCantFijo.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LBienvenido = new javax.swing.JLabel();
        LSeleccionSinc = new javax.swing.JLabel();
        LSeleccionDirecc = new javax.swing.JLabel();
        BContinuar = new javax.swing.JButton();
        LSeleccionFormato = new javax.swing.JLabel();
        LSeleccionFormato1 = new javax.swing.JLabel();
        CSincronizacion = new javax.swing.JComboBox();
        CDireccionamiento = new javax.swing.JComboBox();
        CDisciplina = new javax.swing.JComboBox();
        CSend = new javax.swing.JComboBox();
        CReceive = new javax.swing.JComboBox();
        CDirecto = new javax.swing.JComboBox();
        CIndirecto = new javax.swing.JComboBox();
        CDirecReceive = new javax.swing.JComboBox();
        LSeleccionCantProcesos = new javax.swing.JLabel();
        TCantProcesos = new javax.swing.JTextField();
        CLargo = new javax.swing.JComboBox();
        TCantFijo = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LBienvenido.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        LBienvenido.setText("¡Bienvenido!");
        LBienvenido.setName(""); // NOI18N

        LSeleccionSinc.setText("Seleccione el tipo de sincronización deseado:");

        LSeleccionDirecc.setText("Seleccione el tipo de direccionamiento deseado:");

        BContinuar.setText("Continuar");
        BContinuar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BContinuarActionPerformed(evt);
            }
        });

        LSeleccionFormato.setText("Seleccione el tipo de formato deseado:");

        LSeleccionFormato1.setText("Seleccione la disciplina de manejo de datos deseada:");

        CSincronizacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Send", "Receive" }));
        CSincronizacion.setToolTipText("Debe escoger el tipo de sincronización requerido");
        CSincronizacion.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        CSincronizacion.setName(""); // NOI18N
        CSincronizacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CSincronizacionActionPerformed(evt);
            }
        });

        CDireccionamiento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Directo", "Indirecto" }));
        CDireccionamiento.setToolTipText("Selección de direccionamiento requerido.");
        CDireccionamiento.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        CDireccionamiento.setName(""); // NOI18N
        CDireccionamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CDireccionamientoActionPerformed(evt);
            }
        });

        CDisciplina.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "FIFO (First In - First Out)", "Prioridad" }));
        CDisciplina.setToolTipText("Modalidad de manejo de datos seleccionada.");
        CDisciplina.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        CDisciplina.setName(""); // NOI18N
        CDisciplina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CDisciplinaActionPerformed(evt);
            }
        });

        CSend.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Blocking", "Non-Blocking" }));
        CSend.setToolTipText("Debe seleccionar la modalidad de envío que se desee");
        CSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CSendActionPerformed(evt);
            }
        });

        CReceive.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Blocking", "Non-Blocking", "Prueba de llegada" }));
        CReceive.setToolTipText("Debe seleccionar la modalidad de de recibo de mensajes deseada.");

        CDirecto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Send", "Receive" }));
        CDirecto.setToolTipText("Modalidad de direccionamiento directo deseada.");
        CDirecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CDirectoActionPerformed(evt);
            }
        });

        CIndirecto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Estático", "Dinámico" }));
        CIndirecto.setToolTipText("Modalidad de direccionamieno indrecto deseada.");

        CDirecReceive.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Explícito", "Implícito" }));
        CDirecReceive.setToolTipText("Tipo de emisor deseado.");
        CDirecReceive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CDirecReceiveActionPerformed(evt);
            }
        });

        LSeleccionCantProcesos.setText("Seleccione la cantidad de procesos por utilizar:");

        TCantProcesos.setToolTipText("Debe ingresar el númerro de procesos que desea utillizar en la ejecución.");
        TCantProcesos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TCantProcesosActionPerformed(evt);
            }
        });

        CLargo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fijo", "Variable" }));
        CLargo.setToolTipText("Formato de colas que se desee.");
        CLargo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLargoActionPerformed(evt);
            }
        });

        TCantFijo.setToolTipText("Cantidad de elementos en la cola fija seleccionada.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CDisciplina, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BContinuar)
                .addGap(33, 33, 33))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(LSeleccionSinc))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(197, 197, 197)
                        .addComponent(LBienvenido, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(LSeleccionCantProcesos))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LSeleccionDirecc)
                            .addComponent(LSeleccionFormato, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CDireccionamiento, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CSincronizacion, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CLargo, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(84, 84, 84)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(CSend, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(75, 75, 75)
                                        .addComponent(CReceive, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(CIndirecto, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(CDirecto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(CDirecReceive, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(TCantFijo, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(LSeleccionFormato1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(TCantProcesos, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LBienvenido, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(LSeleccionCantProcesos)
                .addGap(9, 9, 9)
                .addComponent(TCantProcesos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(LSeleccionSinc)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CSincronizacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CSend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CReceive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LSeleccionDirecc, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CDireccionamiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CIndirecto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CDirecto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CDirecReceive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(LSeleccionFormato)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BContinuar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CLargo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TCantFijo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(LSeleccionFormato1)
                        .addGap(18, 18, 18)
                        .addComponent(CDisciplina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 20, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BContinuarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BContinuarActionPerformed
        //GET CANT PROCESOS
        try{
            int numProcesos = Integer.parseInt(TCantProcesos.getText());
            if ((1 < numProcesos)&& (numProcesos < 7)){
                Globales.Procesos = numProcesos;
            }
            else{
                JDialog Error = new JDialog(); JTextArea ErrorText = new JTextArea(); ErrorText.setText("Debe ingresar un número entre 2 y 6 en el campo del número de procesos.");
                ErrorText.setLineWrap(true);Error.setSize(100, 100);Error.add(ErrorText);Error.setTitle("Error");Error.setVisible(true);
            }
        }
        catch(Exception e){
            JDialog Error = new JDialog(); JTextArea ErrorText = new JTextArea(); ErrorText.setText("Debe ingresar un número entre 2 y 6 en el campo del número de procesos.");
            ErrorText.setLineWrap(true);Error.setSize(100, 100);Error.add(ErrorText);Error.setTitle("Error");Error.setVisible(true);
        }
        //GET RECEIVE
        try{
            Globales.Receive = CReceive.getSelectedItem().toString();
        }
        catch(Exception e){
            JDialog Error = new JDialog(); JTextArea ErrorText = new JTextArea(); ErrorText.setText("Debe configurar la sincronización Receive.");
            ErrorText.setLineWrap(true);Error.setSize(100, 100);Error.add(ErrorText);Error.setTitle("Error");Error.setVisible(true);            
        }
        //GET SEND
        try{
            switch (CSend.getSelectedItem().toString()){
                case "Blocking":
                    Globales.SendBlocking = true;
                    break;
                case "Non-Blocking":
                    Globales.SendBlocking = false;
                    break;
            }
        }
        catch(Exception e){
            JDialog Error = new JDialog(); JTextArea ErrorText = new JTextArea(); ErrorText.setText("Debe configurar la sincronización Send.");
            ErrorText.setLineWrap(true);Error.setSize(100, 100);Error.add(ErrorText);Error.setTitle("Error");Error.setVisible(true);            
        }
        //GET DIRECCIONAMIENTO
        try{
            if (CDireccionamiento.getSelectedItem().toString().equals("Directo")){
                Globales.DireccionamientoDirecto = true;
                if (CDirecReceive.getSelectedItem().toString().equals("Receive Explícito")){
                    Globales.ReceiveExplicito = true;
                }
                else{
                    Globales.ReceiveExplicito = false;
                }
            }
            else{
                Globales.DireccionamientoDirecto = false;
            }            
        }
        catch(Exception e){
            JDialog Error = new JDialog(); JTextArea ErrorText = new JTextArea(); ErrorText.setText("Debe configurar la sincronización de Direccionamiento completamente.");
            ErrorText.setLineWrap(true);Error.setSize(100, 100);Error.add(ErrorText);Error.setTitle("Error");Error.setVisible(true);            
        }
    }//GEN-LAST:event_BContinuarActionPerformed

    private void CSincronizacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CSincronizacionActionPerformed
        // TODO add your handling code here:        
        String valor=CSincronizacion.getSelectedItem().toString();
        if (valor.equals("Send")){
        CSend.setVisible(true);
        CReceive.setVisible(false);
        }
        else if (valor.equals("Receive")){
        CReceive.setVisible(true);
        CSend.setVisible(false);
        }
            
    }//GEN-LAST:event_CSincronizacionActionPerformed

    private void CDireccionamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CDireccionamientoActionPerformed
        // TODO add your handling code here:
        String valor=CDireccionamiento.getSelectedItem().toString();
        switch (valor) {
            case "Directo":
                CDirecto.setVisible(true);
                CIndirecto.setVisible(false);
                break;
            case "Indirecto":
                CDirecto.setVisible(false);
                CIndirecto.setVisible(true);
                CDirecReceive.setVisible(false);
                break;
        }
        
    }//GEN-LAST:event_CDireccionamientoActionPerformed

    private void CDisciplinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CDisciplinaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CDisciplinaActionPerformed

    private void CDirecReceiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CDirecReceiveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CDirecReceiveActionPerformed

    private void CDirectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CDirectoActionPerformed
        // TODO add your handling code here:
        String valorCDirecto=CDirecto.getSelectedItem().toString();
        if (valorCDirecto.equals("Receive")){
        CDirecReceive.setVisible(true);
        }
        else{
            CDirecReceive.setVisible(false);
        }
    }//GEN-LAST:event_CDirectoActionPerformed

    private void CSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CSendActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CSendActionPerformed

    private void CLargoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLargoActionPerformed
        // TODO add your handling code here:        
        String valorCLargo=CLargo.getSelectedItem().toString();
        switch (valorCLargo) {
            case "Fijo":
                TCantFijo.setEditable(true);
                TCantFijo.setVisible(true);
                break;
            case "Variable":
                TCantFijo.setVisible(false);
                break;
        }
    }//GEN-LAST:event_CLargoActionPerformed

    private void TCantProcesosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TCantProcesosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TCantProcesosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaInicio().setVisible(true);         
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BContinuar;
    private javax.swing.JComboBox CDirecReceive;
    private javax.swing.JComboBox CDireccionamiento;
    private javax.swing.JComboBox CDirecto;
    private javax.swing.JComboBox CDisciplina;
    private javax.swing.JComboBox CIndirecto;
    private javax.swing.JComboBox CLargo;
    private javax.swing.JComboBox CReceive;
    private javax.swing.JComboBox CSend;
    private javax.swing.JComboBox CSincronizacion;
    private javax.swing.JLabel LBienvenido;
    private javax.swing.JLabel LSeleccionCantProcesos;
    private javax.swing.JLabel LSeleccionDirecc;
    private javax.swing.JLabel LSeleccionFormato;
    private javax.swing.JLabel LSeleccionFormato1;
    private javax.swing.JLabel LSeleccionSinc;
    private javax.swing.JTextField TCantFijo;
    private javax.swing.JTextField TCantProcesos;
    // End of variables declaration//GEN-END:variables
}
